name: CI - Test & Validate

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  validate:
    name: Validate OpenAPI Spec
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install -g @openapitools/openapi-generator-cli
          # Install yq for YAML processing
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod a+x /usr/local/bin/yq

      - name: Validate OpenAPI specification
        run: ./validate-mcp-extensions.sh api/openapi.yaml

      - name: Test template files
        run: ./test-templates.sh

  generate:
    name: Generate MCP Servers
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        language: [csharp, python, typescript, go, java]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install OpenAPI Generator CLI
        run: npm install -g @openapitools/openapi-generator-cli

      - name: Generate ${{ matrix.language }} code
        run: ./generate-mcp-all.sh --languages=${{ matrix.language }}

      - name: Copy generated code for artifact upload
        run: |
          mkdir -p ./artifacts
          if [ -d "../generated/${{ matrix.language }}-mcp" ]; then
            cp -r ../generated/${{ matrix.language }}-mcp ./artifacts/
          fi

      - name: Upload generated code
        uses: actions/upload-artifact@v4
        with:
          name: generated-${{ matrix.language }}
          path: ./artifacts/${{ matrix.language }}-mcp/
          retention-days: 7

  test-csharp:
    name: Test C# Generated Code
    runs-on: ubuntu-latest
    needs: generate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install OpenAPI Generator CLI
        run: npm install -g @openapitools/openapi-generator-cli

      - name: Generate C# code
        run: ./generate-mcp-all.sh --languages=csharp

      - name: Test C# compilation
        run: |
          cd ../generated/csharp-mcp
          dotnet build --configuration Release || true

  test-python:
    name: Test Python Generated Code
    runs-on: ubuntu-latest
    needs: generate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install OpenAPI Generator CLI
        run: npm install -g @openapitools/openapi-generator-cli

      - name: Generate Python code
        run: ./generate-mcp-all.sh --languages=python

      - name: Test Python syntax
        run: |
          python -m py_compile ../generated/python-mcp/petstore_mcp/api/*.py || true

  test-typescript:
    name: Test TypeScript Generated Code
    runs-on: ubuntu-latest
    needs: generate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install OpenAPI Generator CLI
        run: npm install -g @openapitools/openapi-generator-cli

      - name: Generate TypeScript code
        run: ./generate-mcp-all.sh --languages=typescript

      - name: Install TypeScript
        run: npm install -g typescript

      - name: Test TypeScript compilation
        run: |
          cd ../generated/typescript-mcp
          npx tsc api/*.ts --noEmit --skipLibCheck || true

  test-go:
    name: Test Go Generated Code
    runs-on: ubuntu-latest
    needs: generate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install OpenAPI Generator CLI
        run: npm install -g @openapitools/openapi-generator-cli

      - name: Generate Go code
        run: ./generate-mcp-all.sh --languages=go

      - name: Test Go syntax
        run: |
          cd ../generated/go-mcp
          go fmt ./... || true
          go vet ./... || true

  test-java:
    name: Test Java Generated Code
    runs-on: ubuntu-latest
    needs: generate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install OpenAPI Generator CLI
        run: npm install -g @openapitools/openapi-generator-cli

      - name: Generate Java code
        run: ./generate-mcp-all.sh --languages=java

      - name: Test Java compilation
        run: |
          cd ../generated/java-mcp
          mvn clean compile -DskipTests || true

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [validate, generate, test-csharp, test-python, test-typescript, test-go, test-java]
    if: always()

    steps:
      - name: Check results
        run: |
          echo "âœ… All CI checks completed"
          echo "Validation: ${{ needs.validate.result }}"
          echo "Generation: ${{ needs.generate.result }}"
          echo "C# Tests: ${{ needs.test-csharp.result }}"
          echo "Python Tests: ${{ needs.test-python.result }}"
          echo "TypeScript Tests: ${{ needs.test-typescript.result }}"
          echo "Go Tests: ${{ needs.test-go.result }}"
          echo "Java Tests: ${{ needs.test-java.result }}"
